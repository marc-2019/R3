# .github/workflows/ci.yml

name: R3 CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-linux:
    name: Test (Linux)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: r3_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: List installed packages
      run: npm list
    
    - name: Run tests with verbose output
      run: npm test -- --verbose
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/r3_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

  test-windows:
    name: Test (Windows)
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Set up WSL
      run: |
        wsl --install -d Ubuntu
        wsl --set-default-version 2
      shell: pwsh

    - name: Set up Docker
      uses: crazy-max/ghaction-setup-docker@v1
      with:
        version: latest

    - name: Configure Docker for Linux containers
      run: |
        docker version
        docker info | findstr "Operating System"
      shell: pwsh
      
    # Add explicit image pulls
    - name: Pull required images
      run: |
        docker pull postgres:14-alpine --platform linux/amd64
        docker pull redis:latest --platform linux/amd64
      shell: pwsh

    - name: Check Docker configuration
      run: |
        docker info
        Write-Host "Docker configuration verified"
      shell: pwsh
    
    - name: Verify Docker Compose file
      run: |
        if (!(Test-Path "docker/docker-compose.yml")) {
          throw "docker/docker-compose.yml not found"
        }
      shell: pwsh

    - name: Verify Docker Compose files
      run: |
        if (!(Test-Path "docker/docker-compose-test.txt")) {
          throw "docker/docker-compose-test.txt not found"
        }
      shell: pwsh

    - name: Start Docker services
      run: |
        cd docker
        docker compose -f docker-compose-test.txt up -d
        Start-Sleep -Seconds 30
      shell: pwsh

    - name: Check Docker status
      run: |
        docker ps
        docker compose -f docker/docker-compose-test.txt ps
      shell: pwsh

    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run tests with verbose output
      run: npm test -- --verbose
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/r3_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Create Windows setup script
      if: github.ref == 'refs/heads/main'
      run: |
        @"
        @echo off
        echo Setting up R3 System...
        docker compose up -d
        npm install
        npx prisma generate
        npx prisma db push
        echo Setup complete! Run 'npm run dev' to start the application.
        "@ > setup-windows.bat
      shell: pwsh

    - name: Upload Windows setup artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: windows-setup
        path: |
          setup-windows.bat
          docker/docker-compose.yml
          docker/docker-compose-test.txt
          docker/docker-compose-prod.txt
          package.json
          package-lock.json

  build-and-push:
    needs: [test-linux, test-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max