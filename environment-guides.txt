# R3 Environment-Specific Setup Guides

## Table of Contents
1. [Development Environment](#development-environment)
2. [Testing Environment](#testing-environment)
3. [Production Environment](#production-environment)

## Development Environment

### Prerequisites
- Node.js 18+
- Docker Desktop
- Git
- VSCode (recommended)
- 16GB RAM
- 100GB disk space

### Initial Setup
```bash
# Clone and setup
git clone git@github.com:marc-2019/R3.git
cd R3
chmod +x setup.sh
./setup.sh

# Configure environment
cp .env.example .env.local

# Edit .env.local with development settings
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/r3_dev
REDIS_URL=redis://localhost:6379
NODE_ENV=development
```

### VSCode Setup
```bash
# Install recommended extensions
code --install-extension dbaeumer.vscode-eslint
code --install-extension esbenp.prettier-vscode
code --install-extension bradlc.vscode-tailwindcss
```

### Start Development
```bash
# Start services
npm run docker:dev

# Start development server
npm run dev

# View service logs
npm run docker:dev:logs
```

### Development URLs
- Application: http://localhost:3000
- Mail Testing: http://localhost:8025
- Database: localhost:5432
- Redis: localhost:6379

### Common Development Tasks
```bash
# Run tests in watch mode
npm run test:watch

# Run linter
npm run lint

# Update dependencies
npm update

# Reset development environment
npm run docker:dev:down
docker volume prune
npm run docker:dev
```

## Testing Environment

### Prerequisites
- Node.js 18+
- Docker
- 8GB RAM
- 50GB disk space

### Setup
```bash
# Clone and setup
git clone git@github.com:marc-2019/R3.git
cd R3
cp .env.example .env.test

# Edit .env.test
NODE_ENV=test
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/r3_test
REDIS_URL=redis://localhost:6379
```

### Testing Configuration
```bash
# Install dependencies
npm install

# Run test setup
npm run test:setup

# Run test suite
npm run test
```

### Available Test Commands
```bash
# Run all tests
npm test

# Run with coverage
npm run test:coverage

# Run specific tests
npm test -- users.test.ts

# Update snapshots
npm test -- -u
```

### CI Integration
```bash
# Run CI checks locally
npm run lint && npm test

# Run specific CI job
act -j test
```

### Test Data Management
```bash
# Reset test database
npm run test:db:reset

# Seed test data
npm run test:db:seed

# Export test data
npm run test:db:export
```

## Production Environment

### Prerequisites
- Docker
- 32GB RAM (recommended)
- 200GB disk space
- SSL certificates
- Domain name

### Production Setup
```bash
# Clone repository
git clone git@github.com:marc-2019/R3.git
cd R3

# Configure production environment
cp .env.example .env.production

# Edit .env.production with secure values
NODE_ENV=production
DATABASE_URL=postgresql://user:pass@production-db:5432/r3_prod
REDIS_URL=redis://production-redis:6379
```

### Security Configuration
```bash
# Generate production keys
openssl rand -base64 32 > production.key

# Configure SSL
# Add SSL certificates to ./docker/nginx/ssl/
```

### Deployment
```bash
# Build production images
docker-compose -f docker-compose.prod.yml build

# Start production services
docker-compose -f docker-compose.prod.yml up -d

# Check logs
docker-compose -f docker-compose.prod.yml logs -f
```

### Monitoring Setup
```bash
# Install monitoring tools
docker-compose -f docker-compose.monitoring.yml up -d

# Access monitoring
- Grafana: https://monitoring.yourdomain.com
- Prometheus: http://localhost:9090
```

### Backup Procedures
```bash
# Backup database
./scripts/backup-db.sh

# Backup Redis
./scripts/backup-redis.sh

# Scheduled backups
0 */6 * * * /path/to/R3/scripts/backup-db.sh
```

### Environment Files

#### `.env.local` (Development)
```env
NODE_ENV=development
NEXT_PUBLIC_API_URL=http://localhost:3000
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/r3_dev
REDIS_URL=redis://localhost:6379
JWT_SECRET=local-secret-key
ROOT_NETWORK_NODE=http://localhost:8545
REALITY2_ENDPOINT=http://localhost:3001
```

#### `.env.test` (Testing)
```env
NODE_ENV=test
NEXT_PUBLIC_API_URL=http://localhost:3000
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/r3_test
REDIS_URL=redis://localhost:6379
JWT_SECRET=test-secret-key
ROOT_NETWORK_NODE=http://localhost:8545
REALITY2_ENDPOINT=http://localhost:3001
```

#### `.env.production` (Production)
```env
NODE_ENV=production
NEXT_PUBLIC_API_URL=https://api.yourdomain.com
DATABASE_URL=postgresql://user:pass@production-db:5432/r3_prod
REDIS_URL=redis://production-redis:6379
JWT_SECRET=your-secure-secret
ROOT_NETWORK_NODE=http://root-node:8545
REALITY2_ENDPOINT=http://reality2:3001
```

### Environment-Specific Docker Configurations

Create these files in your project root:


version: '3.8'

services:
  dev-db:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: r3_dev
    volumes:
      - dev-db-data:/var/lib/postgresql/data

  dev-redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - dev-redis-data:/data

  dev-mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  root-node-dev:
    build:
      context: ./docker/root-node
      dockerfile: Dockerfile.dev
    ports:
      - "8545:8545"
    volumes:
      - root-node-dev-data:/root/data

  reality2-dev:
    build:
      context: ./docker/reality2
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@dev-db:5432/reality2_dev

volumes:
  dev-db-data:
  dev-redis-data:
  root-node-dev-data:
